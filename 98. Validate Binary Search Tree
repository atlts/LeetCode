Descrition:
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Solution:

Approach 1: Recursion
The idea above could be implemented as a recursion. One compares the node value with its upper and lower limits if they are available. 
Then one repeats the same step recursively for left and right subtrees.

import java.util.ArrayList;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean getRes(TreeNode root,int minValue,int maxValue){
        if(root == null) return true;
        if(root.val > maxValue || root.val < minValue) return false;
        if(root.left != null && root.val == Integer.MIN_VALUE) return false;
        if(root.right != null && root.val == Integer.MAX_VALUE) return false;
        return (getRes(root.left,minValue,root.val - 1) && getRes(root.right,root.val + 1,maxValue));
    }
    public boolean isValidBST(TreeNode root) {
        return getRes(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
        
    }
}


Approach 3: Inorder traversal
Algorithm

Let's use the order of nodes in the inorder traversal Left -> Node -> Right.

class Solution {
  public boolean isValidBST(TreeNode root) {
    Stack<TreeNode> stack = new Stack();
    double inorder = - Double.MAX_VALUE;

    while (!stack.isEmpty() || root != null) {
      while (root != null) {
        stack.push(root);
        root = root.left;
      }
      root = stack.pop();
      // If next element in inorder traversal
      // is smaller than the previous one
      // that's not BST.
      if (root.val <= inorder) return false;
      inorder = root.val;
      root = root.right;
    }
    return true;
  }
}
