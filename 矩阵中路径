题目描述：
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，
每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 
例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，
但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
题解：
public class Solution {
    public boolean flag;

    public void dfs(char []matrix,int x,int y,int rows,int cols,char[] str,int cnt,boolean []mk){
        if(flag) return;
        if(matrix[y + (x - 1) * cols - 1] != str[cnt]) return;
        if(cnt == str.length - 1){
          flag = true;
          return ;
        }
        mk[y + (x - 1) * cols - 1] = true;
        int [][]f ={{0,-1},{0,1},{1,0},{-1,0}};
        for(int i = 0;i < 4;i++){
            int xx = x + f[i][0];
            int yy = y + f[i][1];
            if(xx <= 0 || xx > rows || yy <= 0||yy > cols || mk[yy + (xx - 1) * cols - 1]) continue ;
            dfs(matrix,xx,yy,rows,cols,str,cnt + 1,mk);
        }
        mk[y + (x - 1) * cols - 1] = false;
    }
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        if(str.length == 0) return true;
        if(rows == 0|| cols == 0 || matrix.length == 0) return false;
        boolean []mk = new boolean[rows * cols];
        for(int i = 1;i <= rows;i++)
            for(int j = 1;j <= cols;j++){
                dfs(matrix,i,j,rows,cols,str,0,mk);
                if(flag) return flag;
            }
        return false;
    }
}
