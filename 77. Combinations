Description:

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Solution:

recursionï¼Œset start and end to prune

import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>>ans = new ArrayList();
    public void getList(int num,int cnt,int n,List<Integer>run) {
        if (cnt == 0) {
            ans.add(new ArrayList<Integer>(run));
            return;
        }
        for (int i = num; i <= n; i++) {
            run.add(i);
            getList(i + 1, cnt - 1,n + 1,run);
            run.remove(run.size() - 1);
        }
    }
    public List<List<Integer>> combine(int n, int k) {
        getList(1,k,n - k + 1,new ArrayList<Integer>());
        return ans;
    }
}
