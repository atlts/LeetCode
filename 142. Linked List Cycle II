Description:
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Solution:
when the fast point meet the slow point, the fast point must have n*r nodes longer than the slow point,r is the size of the cycle,
n = 0,1,2,3...
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null) return null;
        ListNode p1 = head,p2 = head.next;
        while(p1 != p2){
            p1 = p1.next;
            if(p1 == null) return null;
            p2 = p2.next;
            if(p2 == null) return null;
            p2 = p2.next;
            if(p2 == null) return null;
        }
        p1 = head;
        p2 = p2.next;
        while(p1 != p2){
            p1 = p1.next;
            if(p1 == null) return null;
            p2 = p2.next;
            if(p2 == null) return null;
        }
        return p1;
    }
}
