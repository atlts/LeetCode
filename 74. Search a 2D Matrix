Description:

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Solution:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0) return false;
        int m = matrix.length;
        if(matrix[0].length == 0) return false;
        int n = matrix[0].length;
        int r = m * n - 1,l = 0;
        boolean flag = false;
        while(l <= r){
            int mid = (l + r) >> 1;
            int x = mid / n,y = mid % n;
         //   System.out.println(x + " " + y);
            if(matrix[x][y] > target) r = mid - 1;
            else if(matrix[x][y] < target) l = mid + 1;
            else {
                flag = true;
                break;
            }
        }
        return flag;
    }
}
