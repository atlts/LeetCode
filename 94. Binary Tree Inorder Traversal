Description:

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null) return new ArrayList<Integer>();
        List<Integer>res = new ArrayList<Integer>();
        TreeNode p = root;
        Stack<TreeNode>ans = new Stack<TreeNode>();
        while(p != null || !ans.isEmpty()){
            if(p != null){
                while(p.left != null){
                    ans.push(p);
                    p = p.left;
                }
                res.add(p.val);
                p = p.right;
            }
            else{
                p = ans.pop();
                res.add(p.val);
                p = p.right;
            }
        }
        return res;
    }
}
