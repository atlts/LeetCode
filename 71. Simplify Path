Description:
Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.

In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level.
For more information, see: Absolute path vs relative path in Linux/Unix

Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names.
The last directory name (if it exists) must not end with a trailing /. Also, the canonical path must be the shortest string representing 
the absolute path.

 

Example 1:

Input: "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.

Solution:

import java.util.LinkedList;

class Solution {
    public String simplifyPath(String path) {
        StringBuilder str = new StringBuilder(path.length() - 1);
        int count = 0;
        int rr = path.length() - 1;
        if(path.length() == 0) return null;
        else if(path.length() == 1) return "/";
        while(rr >= 0){
            int ll = path.lastIndexOf('/',rr);
            if(ll == rr) rr--;
            else{
                String now = path.substring(ll + 1,rr + 1);
                rr = ll - 1;
                if(".".equals(now)) continue;
                else if("..".equals(now)) count++;
                else if(count > 0) count--;
                else str.insert(0,"/" + now);
              
            }
        }
       return str.length() == 0 ? "/" : str.toString(); 
    }
}
