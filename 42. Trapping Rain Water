Description:

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


Solution:

The code is so elegant.
we set l = 0,r = height.length - 1 and continue add 1 to l, add -1 to r;
and we can record the left_max ( height[0]~height[l] ) and the right_max (height[r] ~ height[length - 1])
for every bar we meet ,we can know how much water it can hold: min(left_max,right_max) - height[now_bar]
and the code make sure we are using the minner one when we do the subtraction

class Solution {
    public int trap(int[] height) {
        int left_max = 0,right_max = 0,l = 0,r = height.length - 1;
        int ans = 0;
        while(l < r){
            if(height[l] < height[r]){// at this row height[r] is always bigger than height[l],and left_max is one of height[l]s,so left_max is the minner one when we get into this if 
                if(height[l] > left_max) {
                    left_max = height[l];
                }
                else ans += left_max - height[l];
                l++;
            }
            else{
                if(height[r] > right_max){
                    right_max = height[r];
                }
                else ans += right_max - height[r];
                r--;
            }
        }
        return ans;
    }
}
