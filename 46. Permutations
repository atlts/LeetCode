Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


Solution:
just watch the code

class Solution {
    List<List<Integer>> ans = new ArrayList<>();
	//A dfs recursion generate all kinds of permutations
    public void getList(List<Integer> list,int[] nums,boolean[] flag,int cnt){
        if(cnt == nums.length){//if the whole nums have been put into list
            ans.add(new ArrayList<>(list));
            return ;
        }
        for(int i = 0;i < nums.length;i++){
            if(flag[i]) continue;
            flag[i] = true;
            list.add(nums[i]);
            getList(list,nums,flag,cnt + 1);
            list.remove(list.size() - 1);//easy way to use only ont list and flags
            flag[i] = false;
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        ans.clear();
        boolean []flag = new boolean[nums.length + 1];//To mark every member of nums has been used or not
        for(int i = 0;i < nums.length + 1;i++) flag[i] = false;
        getList(new ArrayList<Integer> (),nums,flag,0);
        return ans;
    }
}
