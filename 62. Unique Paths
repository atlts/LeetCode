Description:

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right

Solution:

class Solution {
  
    public int uniquePaths(int m, int n) {
        if(n == 1||m == 1) return 1;
        else if(m <= 0||n <= 0) return 0;
        int [][]dp = new int[n + 1][m + 1];
        for(int i = 1;i <= n;i++)
            for(int j = 1;j <= m;j++){
                if(i == 1&&j == 1) dp[i][j] = 1;
                 if(i > 1) dp[i][j] += dp[i-1][j];
                if(j > 1) dp[i][j] += dp[i][j-1];
            }
        return dp[n][m];
    }
}
