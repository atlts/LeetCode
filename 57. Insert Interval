Description:

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Solution:

merge newInterval and the interval that is over-lapping with it and insert the new interval at proper moment

class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        boolean flagmerge = false;//if newInterval has been merged 
        List<Interval>ans = new ArrayList();
        for(Interval now : intervals){                                                                     
             if(now.end < newInterval.start || now.start > newInterval.end){  //if two intervals are over-lapping
                if(now.start > newInterval.end && !flagmerge){
                    flagmerge = true;
                    ans.add(newInterval);
                }
                    ans.add(now);
            }else{//merge two intervals
                newInterval.start = Math.min(newInterval.start,now.start);
                newInterval.end = Math.max(newInterval.end,now.end);
            }  
        }
        if(!flagmerge) ans.add(newInterval);
        return ans;
    }
}
