Descriotion:
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity,
it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

Solution:
Use the HapMap cost more than O(1).....but it seems that we don't have to considerate that...
And map.size() does cost some time
import java.util.HashMap;
import java.util.Map;

class LRUCache {
    class DoubleList{
        int key;
        int value;
        DoubleList pre;
        DoubleList post;
    }
    DoubleList head,tail;
    int cnt = 0;
    int capacity;
    Map<Integer,DoubleList> ans;
    public void deleteNode(DoubleList node){
        node.pre.post = node.post;
        node.post.pre = node.pre;
    }

    public void addNode(DoubleList node){
        node.pre = head;
        node.post = head.post;
        head.post.pre = node;
        head.post = node;
    }
    public LRUCache(int capacity) {
        ans = new HashMap<Integer,DoubleList>(capacity + 1);
        head = new DoubleList();
        tail = new DoubleList();
        head.pre = null;
        tail.post = null;
        head.post = tail;
        tail.pre = head;
        this.capacity = capacity;
    }

    public int get(int key) {
            DoubleList st = ans.get(key);
            if(st == null) return -1;
            deleteNode(st);
            addNode(st);
            return st.value;
    }

    public void put(int key, int value) {
     
            DoubleList st = ans.get(key);
            if(st != null){
            deleteNode(st);
            addNode(st);
            st.value = value;
            }
        else{
            DoubleList now = new DoubleList();
            now.key = key;
            now.value = value;
            ans.put(key,now);
            addNode(now);
            cnt++;
            if(cnt > capacity){
                ans.remove(tail.pre.key);
                deleteNode(tail.pre);
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
