Description:

Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL

Solution:

connect the tail with the head and calculate the new head

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0) return head;
        int cnt = 2;
        ListNode headNew = head,tail = head.next;
        while(tail.next != null){
            tail = tail.next;
            cnt++;
        }
        tail.next = head;
        k %= cnt;
        k = cnt - k;
        while(true){
            if(--k == 0) break;
            headNew = headNew.next;
        }
        head = headNew.next;
        headNew.next = null;
        return head;
    }
}
