Description:

Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:

Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"
Note:

If there is no such window in S that covers all characters in T, return the empty string "".
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.

Solution:
Algorithm

1.We start with two pointers, leftleft and rightright initially pointing to the first element of the string SS.

2.We use the rightright pointer to expand the window until we get a desirable window i.e. a window that contains
all of the characters of TT.

3.Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one
we keep on updating the minimum window size.

4.If the window is not desirable any more, we repeat step \; 2step2 onwards.

class Solution {
    public String minWindow(String s, String t)  {
        if (s.length() == 0 || t.length() == 0) return "";
        int[] num = new int[3000];
        boolean[] flag = new boolean[3000];
        for (int i = 0; i < t.length(); i++) {
            num[t.charAt(i) - 'A']++;
            flag[t.charAt(i) - 'A'] = true;
        }
        int l = 0, r = 0, res = s.length(), cnt = 0, mk = 0;
        StringBuilder str = new StringBuilder("");
        while (l < s.length() && r < s.length()) {
            if ((mk) == 0) {
                int temp = s.charAt(r) - 'A';
                if (!flag[s.charAt(r) - 'A']) r++;
                else {
                    if (num[temp] > 0) cnt++;
                    num[temp]--;
                    if (cnt == t.length()) {
                        if (r - l + 1 <= res) {
                            str = new StringBuilder(s.substring(l, r + 1));
                            res = r - l + 1;
                        }
                        
                        mk ^= 1;
                    } else if (cnt > t.length()) System.out.println("cnt过大 r = " + r);
                    else r++;
                }
                if (r >= s.length()) {
                    r--;
                    mk = 1;
                }
            } else {
                int temp = s.charAt(l) - 'A';
                l++;
                if (!flag[temp]) {
                    if (cnt == t.length() && r - l + 1 <= res) {
                        str = new StringBuilder(s.substring(l, r + 1));
                        res = r - l + 1;
                    }
                } else {
                    if (num[temp] == 0) cnt--;
                    num[temp]++;
                    if (cnt < t.length()) {
                        mk ^= 1;
                        r++;
                        if (r >= s.length()) break;
                    } else if (cnt == t.length()) {
                        if (r - l + 1 <= res) {
                            str = new StringBuilder(s.substring(l, r + 1));
                            res = r - l + 1;
                        }
                    } else System.out.println("cnt过小 l = " + l);
                }
            }
        }
        return str.toString();
    }
}



Simple Code:
class Solution {
    public String minWindow(String s, String t) {

        if (s.length() == 0 || t.length() == 0) {
            return "";
        }
        int []map = new int[130];
        for(int i = 0;i < t.length();i++) map[t.charAt(i)]++;
        for(int i = 0;i < 130;i++) if(map[i] == 0) map[i] = -10000;
        int st = 0,end = 0,d = s.length() + 1,cnt = 0,head = 0;
        while(end < s.length()){
            if(map[s.charAt(end++)]-- > 0) cnt++;
            while(cnt == t.length()){
                if(d >= end - st) d = end - (head = st);
                if(map[s.charAt(st++)]++ == 0) cnt--;
            }
        }
      //  System.out.println(head + " " + d);
        return d == s.length() + 1 ? "" : s.substring(head,d + head);
    }
}

Here is the template that can solve most 'substring' problems:
https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-'substring'-problems
