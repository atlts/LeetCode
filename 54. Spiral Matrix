Descriptionï¼š

Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]

Soltion:

just do the simulation:

import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix.length == 0|| matrix[0].length == 0) return new ArrayList<Integer>();
        int [][]f = new int[][]{{0,1},{-1,0},{0,-1},{1,0}};
        int m = matrix.length,n = matrix[0].length,cnt = 0,mk = 0;
        boolean [][]flag =new boolean[m][n];
        cnt = m * n;
        int xx = 0,yy = 0;
        List<Integer>ans = new ArrayList<>();
        while(true){
            if(cnt-- == 0) break;
            if(xx < 0 || xx >= m || yy <0 || yy >= n || flag[xx][yy]){
                xx -= f[mk][0];
                yy -= f[mk][1];
                mk += 1;
                mk %= 4;
                xx += f[mk][0];
                yy += f[mk][1];
                cnt++;
                continue;
            }
           // System.out.println(xx + " " + yy + " " + matrix[xx][yy] + " " +cnt);
            ans.add(matrix[xx][yy]);
            flag[xx][yy] = true;
            xx += f[mk][0];
            yy += f[mk][1];
        }
        return ans;
    }
}
