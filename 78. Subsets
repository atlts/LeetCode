Description:

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Solution:
the upgrade of 77. Combinations
class Solution {
    public List<List<Integer>>ans = new ArrayList();
    public void getList(int st,int cnt,int end,List<Integer>run,int []nums) {
        if (cnt == 0) {
            ans.add(new ArrayList<Integer>(run));
            return;
        }
        for (int i = st; i <= end; i++) {
            run.add(nums[i]);
            getList(i + 1, cnt - 1,end + 1,run,nums);
            run.remove(run.size() - 1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        int length = nums.length;
        if(length == 0) return ans;
        for(int i = 0;i <= length;i++)
            getList(0,i,length - i,new ArrayList<Integer>(),nums);
        return ans;
    }
}
