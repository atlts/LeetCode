Description:
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

Solution:
class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head == null) return null;
        ListNode p2 = head,pre = new ListNode(head.val - 1);
        pre.next = head;
        ListNode p1 = pre,newHead = pre;
        while(p2 != null){
            if(p2.val < x && pre.val >= x){
                pre.next = p2.next;
                p2.next = p1.next;
                p1.next = p2;
                p1 = p2;
                p2 = pre.next;
                continue;
            }
            if(p2.val < x) p1 = p2;
            pre = p2;
            p2 = p2.next;
            
        }
        return newHead.next;
    }
}
