Description:

Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

Solution:
constructing things as less as you can will save you a lot of time 
class Solution {
    public boolean dfs(char[][]board,int cnt,char[] word,boolean [][]flagPos,int x,int y,int row,int len){
            
            if(cnt == len)   return true;    
        if(x < 0|| x >= row || y < 0 ||y >= board[x].length || flagPos[x][y] || board[x][y] != word[cnt])     
                return false;
            flagPos[x][y] = true;
            if(dfs(board,cnt + 1,word,flagPos,x + 1,y,row,len)) return true;
            if(dfs(board,cnt + 1,word,flagPos,x - 1,y,row,len)) return true;
            if(dfs(board,cnt + 1,word,flagPos,x,y + 1,row,len)) return true;
            if(dfs(board,cnt + 1,word,flagPos,x,y - 1,row,len)) return true;
            flagPos[x][y] = false;
            return false;
    }
    
    public boolean exist(char[][] board, String word) {
        if(board.length == 0) return false;
        int maxCol = 0;
        for(int i = 0;i < board.length;i++) maxCol = Math.max(board[i].length,maxCol);
        char []word1 = word.toCharArray();
        int row = board.length,len = word.length();
        boolean [][]flagPos = new boolean[board.length][maxCol];
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[i].length;j++){
           
                    if(dfs(board,0,word1,flagPos,i,j,row,len)) return true;
                
            }
        }
        return false;    
    }
}
