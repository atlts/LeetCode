Description:
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Solution:
class Solution {
    public int minDistance(String word1, String word2) {
        int [][]dp = new int[word1.length() + 2][word2.length() + 2];
        int len1 = word1.length(),len2 = word2.length();
        if(len1 == 0 || len2 == 0) return len1 + len2;
        for(int i = 0;i <= len1;i++) dp[i][0] = i;
        for(int i = 0;i <= len2;i++) dp[0][i] = i;
        
        for(int i = 1;i <= len1;i++)
            for(int j = 1;j <= len2;j++){
                 int left = dp[i - 1][j] + 1;
                int down = dp[i][j - 1] + 1;
                int left_down = dp[i - 1][j - 1];
                if (word1.charAt(i - 1) != word2.charAt(j - 1))
                    left_down += 1;
                dp[i][j] = Math.min(left, Math.min(down, left_down));
            }
        return dp[word1.length()][word2.length()];
    }
}
