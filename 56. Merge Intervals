Description:

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

solutionï¼šTime complexity : O(nlogn)
7ms

sort the list and it's easy to figure what you should do next 

class Solution {
    private class intervalsComparator implements Comparator<Interval>
    {
        public int compare(Interval a, Interval b){
        if (a.start < b.start) return -1;
        else if (a.start == b.start) {
            if (a.end > b.end) return -1;
            else if (a.end < b.end) return 1;
            else return 0;
        } else return 1;
    }
    }
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals.size() == 0) return new ArrayList<Interval>();
        Collections.sort(intervals, new intervalsComparator());
//        for(Interval interval : intervals)
//            System.out.println(interval.toString());
        List<Interval> ans = new ArrayList<>();
        Interval now = intervals.get(0);
        for (Interval st : intervals) {
            if (now.end < st.start) {
                ans.add(now);
                now = st;
                continue;
            }
            now.start = Math.min(now.start, st.start);
            now.end = Math.max(now.end, st.end);
        }
        ans.add(now);
        return ans;
    }
}
